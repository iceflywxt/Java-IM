/**
 * main trida
 */
package JIM.client;

import java.util.ArrayList;
import javax.swing.DefaultListModel;

/**
 *
 * @author cypher
 */
public class Main extends javax.swing.JFrame {

    public static Main instance = null;
    public DefaultListModel clist = new DefaultListModel();
    /**
     * seznam (otevřených) oken, je zde proto aby se
     * a) neotevírala duplicitní okna
     * b) fungovala jakási lokální historie - mám rozepsaný chat,
     * zavřu omylem okno, otevřu ho znovu a vše je při starém
     */
    private ArrayList<MessageWindow> winlist = new ArrayList<MessageWindow>();

    /** Creates new form Main */
    public Main() {
        setResizable(false);
        initComponents();
        setVisible(false);
        javax.swing.JDialog login = new Login(this, true);
        login.setVisible(true);
        login.addWindowListener(new java.awt.event.WindowAdapter() {

            @Override
            public void windowClosing(java.awt.event.WindowEvent e) {
                dispose();
            }
        });


    }

    /**
     * umoznuje odstranit okno zpravy z interniho seznamu oken 
     * @param mw MessageWindow
     */
    public void removeFromWinList(MessageWindow mw) {
        winlist.remove(mw);
    }

    /**
     * vraci kontakty
     * @return
     */
    public Contact[] getContacts() {
        TCPConnection c = TCPConnection.getInstance();
        ArrayList<Contact> cts = c.getContacts();
        Contact[] cs = new Contact[cts.size()];
        for (int i = 0; i < cs.length; i++) {
            cs[i] = cts.get(i);
            clist.addElement(cs[i]);
        }
        return cs;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        name = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        contacts = new javax.swing.JList();
        signoff = new javax.swing.JButton();
        message = new javax.swing.JButton();
        removeContact = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PR2 - Chat");

        jLabel1.setText("Prihlášen jako:");

        jLabel2.setText("Kontakty:");

        contacts.setCellRenderer(new ContactsRenderer());
        contacts.setModel(new DefaultListModel()
        );
        contacts.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                contactsValueChanged(evt);
            }
        });
        contacts.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                contactsFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                contactsFocusLost(evt);
            }
        });
        jScrollPane1.setViewportView(contacts);

        signoff.setText("Odhlásit");
        signoff.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                signoffMouseClicked(evt);
            }
        });

        message.setText("Poslat zprávu");
        message.setEnabled(false);
        message.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                messageMouseClicked(evt);
            }
        });

        removeContact.setText("Odstranit kontakt");
        removeContact.setEnabled(false);
        removeContact.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                removeContactMouseClicked(evt);
            }
        });

        jButton4.setText("Přidat kontakt");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 244, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                                .addComponent(name, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(message, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 121, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(signoff, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeContact, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(name, javax.swing.GroupLayout.DEFAULT_SIZE, 14, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton4)
                            .addComponent(removeContact))
                        .addGap(37, 37, 37))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(message)
                            .addComponent(signoff))
                        .addContainerGap())))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * kliknuti na "Poslat zpravu"
     * @param evt
     */
    private void messageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_messageMouseClicked

        Contact c = getContacts()[contacts.getSelectedIndex()];
        openMessageWindow(c);

    }//GEN-LAST:event_messageMouseClicked

    /**
     * kliknuti na Odhlasit
     * @param evt
     */
    private void signoffMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_signoffMouseClicked
        Main.restart();
    }//GEN-LAST:event_signoffMouseClicked

    /**
     * kliknuti na Pridat kontakt
     * @param evt
     */
    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        AddContact add = new AddContact(this, true);
        add.setVisible(true);
    }//GEN-LAST:event_jButton4MouseClicked

    /**
     * kliknuti na Odstranit KOntakt
     * @param evt
     */
    private void removeContactMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_removeContactMouseClicked

        TCPConnection c = TCPConnection.getInstance();
        Contact[] cs = getContacts();
        Contact contact = cs[contacts.getSelectedIndex()];
        c.removeContact(contact.getUsername());
        c.send("<msg type='contact-removed' recipient='" + contact.getUsername() + "' from='" + Auth.getInstance().getUsername() + "' />");
        Main.refreshContacts();

    }//GEN-LAST:event_removeContactMouseClicked

    /**
     * Ztrata focusu contact listu,
     * zakazuje nektera tlacitka
     * @param evt
     */
    private void contactsFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contactsFocusLost
        message.setEnabled(false);
        removeContact.setEnabled(false);
    }//GEN-LAST:event_contactsFocusLost

    /**
     * Pokud je index -1 (= neni vybrano),
     * zakazuje nektera tlacitka
     * @param evt
     */
    private void contactsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_contactsValueChanged
        if (contacts.getSelectedIndex() != -1) {
            message.setEnabled(true);
            removeContact.setEnabled(true);
        }
    }//GEN-LAST:event_contactsValueChanged

    /**
     * inverzni funkce k dvema predeslym
     * @param evt
     */
    private void contactsFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_contactsFocusGained
        if (contacts.getSelectedIndex() != -1) {
            message.setEnabled(true);
            removeContact.setEnabled(true);
        }
    }//GEN-LAST:event_contactsFocusGained

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                Main.instance = new Main();
                Main.instance.logged();
            }
        });
    }

    /**
     * restart klienta, pouziva se pri odhlaseni
     */
    public static void restart() {
        Main.instance.dispose();
        Main.instance = null;
        TCPConnection.getInstance().signoff();
        String[] args = new String[0];
        main(args);
    }

    /**
     * refreshne stavy kontaktu v contact listu
     */
    public static void refreshContacts() {
        Main self = Main.instance;
        int i = self.contacts.getSelectedIndex();
        self.contacts.setModel(new DefaultListModel());
        Contact[] cs = self.getContacts();
        self.contacts.setListData(cs);
        if (i >= cs.length) {
            i = cs.length - 1;
        }
        self.contacts.setSelectedIndex(i);

        MessageWindow m;
        for (int n = 0; n < self.winlist.size(); n++) {
            m = self.winlist.get(n);
            m.checkContactState();
        }

    }

    /**
     * provadi se po prihlaseni
     */
    public void logged() {
        Auth a = Auth.getInstance();

        if (a.getUsername().length() > 3) {
            name.setText(a.getName() + " " + a.getSurname());
            setVisible(true);
            contacts.setListData(getContacts());
            refreshContacts();
            TCPConnection c = TCPConnection.getInstance();
            /*System.out.println("SENDING");

            for(int i = 0; i < 1000; i++)c.send("<msg type='message' from='marcel' recipient='cypher' content='ahoj #"+i+"' />");
            System.out.println("SENT");/**/
        } else {
            System.exit(0);
        }

    }

    /**
     * vraci okno zpravy podle kontaktu
     * @param c daný Contact
     * @return
     */
    public MessageWindow getMessageWindow(Contact c) {
        MessageWindow m = null;
        int i = 0;
        while (i < winlist.size()) {
            if (winlist.get(i).getContact().equals(c)) {
                m = winlist.get(i);
                break;
            }
            i++;
        }

        return m;
    }

    /**
     * otevře okno zprávy (pokud existuje, získá ho z winlistu)
     * @param c
     */
    private void openMessageWindow(Contact c) {

        MessageWindow m = getMessageWindow(c);
        if (!(m instanceof MessageWindow)) {
            m = new MessageWindow(this, false, c);
            m.setTitle(c.toString() + " - chat");
        }
        winlist.add(m);

        m.checkContactState();
        m.setVisible(true);

    }

    /**
     * akce pri prichazejici zprave
     * @param m Message zprava
     */
    public static void incomingMessage(Message m) {
        Main self = Main.instance;
        MessageWindow mw = self.getMessageWindow(m.getRecipient());
        if (!(mw instanceof MessageWindow)) {
            mw = new MessageWindow(self, false, m.getRecipient());
            mw.setTitle(m.getRecipient().toString() + " - chat");
            self.winlist.add(mw);

        }
        mw.setVisible(true);
        mw.checkContactState();
        mw.addMessage(m);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList contacts;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton message;
    private javax.swing.JLabel name;
    private javax.swing.JButton removeContact;
    private javax.swing.JButton signoff;
    // End of variables declaration//GEN-END:variables
}
